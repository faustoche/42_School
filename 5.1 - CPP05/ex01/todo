ğŸ“‹ Structure de la classe Form

âœ… Constructeur

 Constructeur qui initialise tous les attributs
 Le formulaire n'est pas signÃ© Ã  la construction (signed = false)
 Validation des grades dans le constructeur (entre 1 et 150)


ğŸ“‹ Gestion des exceptions

âœ… Validation des grades

 VÃ©rifier que les grades sont entre 1 et 150 inclus
 Lancer GradeTooHighException si grade < 1
 Lancer GradeTooLowException si grade > 150

ğŸ“‹ MÃ©thodes publiques
hode beSigned()

 void beSigned(const Bureaucrat& bureaucrat)
 VÃ©rifier si le grade du bureaucrate est suffisant (â‰¤ gradeRequiredToSign)
 Changer le statut Ã  signÃ© si le grade est suffisant
 Lancer Form::GradeTooLowException si le grade est insuffisant
 Rappel : grade 1 > grade 2 (plus petit nombre = grade plus Ã©levÃ©)

ğŸ“‹ Surcharge d'opÃ©rateurs
âœ… OpÃ©rateur d'insertion (<<)

Afficher toutes les informations du formulaire :

Nom du formulaire
Statut signÃ©/non signÃ©
Grade requis pour signer
Grade requis pour exÃ©cuter


ğŸ“‹ Modification de la classe Bureaucrat
âœ… MÃ©thode signForm()

 Modifier la mÃ©thode existante signForm(Form& form)
 Appeler form.beSigned(*this) dans un try-catch
 En cas de succÃ¨s : afficher "<bureaucrat> signed <form>"
 En cas d'Ã©chec : afficher "<bureaucrat> couldn't sign <form> because <reason>"

ğŸ“‹ Tests Ã  implÃ©menter
âœ… Tests de base

 CrÃ©ation d'un formulaire avec des grades valides
 CrÃ©ation d'un formulaire avec des grades invalides (exceptions)
 Test des getters

âœ… Tests de signature

 Bureaucrate avec grade suffisant signe le formulaire
 Bureaucrate avec grade insuffisant ne peut pas signer
 Tentative de signature d'un formulaire dÃ©jÃ  signÃ©

âœ… Tests d'affichage

 Affichage d'un formulaire non signÃ©
 Affichage d'un formulaire signÃ©
 Test de l'opÃ©rateur << avec diffÃ©rents Ã©tats

âœ… Tests d'intÃ©gration

 Test de la mÃ©thode Bureaucrat::signForm() avec succÃ¨s
 Test de la mÃ©thode Bureaucrat::signForm() avec Ã©chec
 VÃ©rification des messages d'erreur appropriÃ©s

ğŸ“‹ Exemple de structure de fichiers
âœ… Organisation des fichiers

 Form.hpp - dÃ©claration de la classe
 Form.cpp - implÃ©mentation de la classe
 main.cpp - tests et dÃ©monstrations
 Inclusion des headers nÃ©cessaires (<iostream>, <string>, <exception>)

ğŸ“‹ Points d'attention
âœ… Bonnes pratiques

 Respect de la forme canonique orthodoxe si nÃ©cessaire
 Gestion appropriÃ©e des const
 Messages d'erreur clairs et informatifs
 Code bien commentÃ© et organisÃ©
 Compilation sans warnings

âœ… Logique mÃ©tier

 Comprendre que grade 1 > grade 2 > grade 3, etc.
 Un bureaucrate peut signer si son grade â‰¤ grade requis
 Les exceptions doivent Ãªtre lancÃ©es au bon moment
 Les messages doivent Ãªtre formatÃ©s correctement
