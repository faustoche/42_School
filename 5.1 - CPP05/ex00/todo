

3.3 Méthodes d'incrémentation/décrémentation

 Implémenter incrementGrade() :

Vérifier que _grade - 1 >= 1
Lancer GradeTooHighException si dépassement
Décrémenter _grade


 Implémenter decrementGrade() :

Vérifier que _grade + 1 <= 150
Lancer GradeTooLowException si dépassement
Incrémenter _grade



3.4 Exceptions

 Implémenter GradeTooHighException::what() avec un message approprié
 Implémenter GradeTooLowException::what() avec un message approprié

3.5 Opérateur d'insertion

 Implémenter operator<< pour afficher : <name>, bureaucrat grade <grade>.

4. Créer les tests dans main.cpp
4.1 Tests de construction valide

 Tester création avec grade valide (ex: grade 75)
 Tester création avec grade limite (1 et 150)
 Vérifier que les getters retournent les bonnes valeurs

4.2 Tests d'exceptions à la construction

 Tester construction avec grade trop haut (0 ou négatif)
 Tester construction avec grade trop bas (151+)
 Utiliser des blocs try/catch pour capturer les exceptions
 Vérifier que les exceptions sont bien du type std::exception

4.3 Tests d'incrémentation/décrémentation

 Tester incrementGrade() sur un bureaucrate avec grade moyen
 Tester decrementGrade() sur un bureaucrate avec grade moyen
 Tester incrementGrade() sur un bureaucrate grade 1 (doit lancer exception)
 Tester decrementGrade() sur un bureaucrate grade 150 (doit lancer exception)

4.4 Test d'affichage

 Tester l'opérateur << avec différents bureaucrates
 Vérifier le format exact : <name>, bureaucrat grade <grade>.

5. Compilation et tests
5.1 Compilation

 Compiler avec g++ -Wall -Wextra -Werror -std=c++98 *.cpp -o bureaucrat
 Vérifier qu'il n'y a aucune erreur de compilation

5.2 Tests d'exécution

 Exécuter le programme et vérifier tous les cas de test
 Vérifier que les exceptions sont bien catchées comme std::exception
 Vérifier que l'affichage correspond exactement au format demandé

6. Validation finale

 Relire le code pour vérifier la norme C++98
 Vérifier que le nom est bien constant (const)
 Vérifier que grade 1 = plus haut, grade 150 = plus bas
 Vérifier que increment diminue le numéro, decrement l'augmente
 Tester tous les cas limites
 Vérifier que les exceptions héritent bien de std::exception

Points importants à retenir :

Grade 1 = le plus haut grade (comme un général)
Grade 150 = le plus bas grade (comme un stagiaire)
Incrementer = améliorer le grade = diminuer le numéro
Décrémenter = dégrader le grade = augmenter le numéro
Les exceptions doivent être catchables avec std::exception&
Le nom est constant et ne peut pas changer après création