TODO List d√©taill√©e - Syst√®me Materia C++
üî¥ ERREURS CRITIQUES √Ä CORRIGER EN PRIORIT√â
1. Makefile

 Corriger la liste des fichiers sources dans MATERIA (remplacer Animal.cpp, Cat.cpp, Dog.cpp, Brain.cpp)
 Ajouter les vrais fichiers : AMateria.cpp, Character.cpp, Cure.cpp, Ice.cpp, main.cpp
 Optionnel : ajouter MateriaSource.cpp si vous impl√©mentez cette classe

2. Supprimer le fichier ICharacter.cpp

 Supprimer compl√®tement le fichier src/ICharacter.cpp (les interfaces n'ont pas d'impl√©mentation)

3. Corriger ICharacter.hpp

 Ajouter un destructeur virtuel : virtual ~ICharacter() {}
 V√©rifier que toutes les m√©thodes sont bien virtuelles pures (avec = 0)


üü° COMPL√âTER LES CLASSES EXISTANTES
4. AMateria.cpp - √Ä compl√©ter

 Corriger le constructeur de copie (ne pas utiliser l'op√©rateur d'assignation dans le constructeur)
 Dans l'op√©rateur d'assignation, ne PAS copier le type (selon le sujet : "copier son type n'a pas grand int√©r√™t")
 Laisser la m√©thode use() vide ou avec un message g√©n√©rique

5. Character.hpp - Modifications structurelles

 Faire h√©riter Character de ICharacter : class Character : public ICharacter
 Supprimer la d√©claration en double de getName()
 Garder seulement : std::string const &getName() const;

6. Character.cpp - Impl√©mentation compl√®te √† faire

 Corriger le constructeur de copie (copie profonde des Materias)
 Impl√©menter l'op√©rateur d'assignation avec copie profonde
 Impl√©menter le destructeur (delete toutes les Materias de l'inventaire)
 Impl√©menter getName() qui retourne le nom
 Impl√©menter equip(AMateria* m) :

Trouver le premier emplacement libre (0 √† 3)
Y placer la Materia
Si inventaire plein, ne rien faire


 Impl√©menter unequip(int idx) :

V√©rifier que idx est valide (0-3)
V√©rifier qu'il y a une Materia √† cet emplacement
Mettre l'emplacement √† NULL
NE PAS delete la Materia (responsabilit√© du code appelant)


 Impl√©menter use(int idx, ICharacter& target) :

V√©rifier que idx est valide (0-3)
V√©rifier qu'il y a une Materia √† cet emplacement
Appeler materia->use(target)



7. Ice.cpp - Corrections

 Impl√©menter le constructeur par d√©faut avec initialisation du type √† "ice"
 Corriger le message dans use() : "* shoots an ice bolt at <nom> *"
 Impl√©menter clone() qui retourne new Ice(*this)
 Corriger l'op√©rateur d'assignation (ne pas copier le type)

8. Cure.cpp - Corrections

 Impl√©menter le constructeur par d√©faut avec initialisation du type √† "cure"
 Corriger le message dans use() : "* heals <nom>'s wounds *"
 Impl√©menter clone() qui retourne new Cure(*this)
 Corriger l'op√©rateur d'assignation (ne pas copier le type)


üü¢ NOUVELLES CLASSES √Ä CR√âER
9. IMateriaSource.hpp - Nouvelle interface

 Cr√©er le fichier includes/IMateriaSource.hpp
 D√©finir la classe avec destructeur virtuel
 Ajouter les m√©thodes virtuelles pures :

virtual void learnMateria(AMateria*) = 0;
virtual AMateria* createMateria(std::string const & type) = 0;



10. MateriaSource.hpp - Nouvelle classe

 Cr√©er le fichier includes/MateriaSource.hpp
 Faire h√©riter de IMateriaSource
 Ajouter un attribut : tableau de 4 pointeurs AMateria (pour stocker les "mod√®les")
 D√©clarer constructeur, destructeur, constructeur de copie, op√©rateur d'assignation
 D√©clarer learnMateria() et createMateria()

11. MateriaSource.cpp - Impl√©mentation

 Cr√©er le fichier src/MateriaSource.cpp
 Impl√©menter le constructeur (initialiser le tableau √† NULL)
 Impl√©menter le destructeur (delete tous les mod√®les stock√©s)
 Impl√©menter le constructeur de copie (copie profonde)
 Impl√©menter l'op√©rateur d'assignation (copie profonde)
 Impl√©menter learnMateria(AMateria* m) :

Trouver le premier emplacement libre (0-3)
Y stocker une copie (m->clone())
Si tableau plein, ne rien faire


 Impl√©menter createMateria(std::string const & type) :

Parcourir les mod√®les stock√©s
Si le type correspond, retourner une copie (clone())
Si type inconnu, retourner NULL




üîµ FINITIONS ET TESTS
12. main.cpp - Programme de test

 Cr√©er des instances d'Ice et Cure
 Cr√©er une MateriaSource
 Faire apprendre des Materias √† la source
 Cr√©er des Characters
 √âquiper des Materias aux personnages
 Tester l'utilisation des Materias
 Tester le unequip sans fuite m√©moire
 Tester la copie profonde des Characters

13. Gestion m√©moire

 V√©rifier qu'il n'y a pas de fuites m√©moire avec valgrind
 S'assurer que toutes les Materias cr√©√©es sont bien d√©truites
 G√©rer les Materias "unequip" (les stocker temporairement puis les delete)

14. Tests edge cases

 Tester equip sur inventaire plein
 Tester unequip/use avec index invalide
 Tester unequip/use sur emplacement vide
 Tester createMateria avec type inexistant
 Tester learnMateria sur source pleine


üìã ORDRE DE TRAVAIL RECOMMAND√â

Corriger les erreurs critiques (Makefile, supprimer ICharacter.cpp)
Compl√©ter Ice et Cure (constructeurs, clone(), messages corrects)
Compl√©ter Character (h√©ritage, toutes les m√©thodes)
Cr√©er MateriaSource (interface + impl√©mentation)
√âcrire main.cpp pour tester
V√©rifier la gestion m√©moire